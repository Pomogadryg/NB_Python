import xlrd
from docx import Document
import sys
import random
from tkinter import *
from tkinter import ttk
import sqlite3


class Graph(object):
    def __init__(self, master):
        self.sel = StringVar()
        self.fav_sel = StringVar()

        self.master = master
        self.master.config(bg='powder blue')
        self.text_rus = Text(self.master, width=25, height=10, wrap='word', bg='old lace')
        self.text_rus.place(x=10, y=100)

        self.text_eng = Text(self.master, width=25, height=10, wrap='word', bg='old lace')
        self.text_eng.place(x=240, y=100)

        self.text_esp = Text(self.master, width=25, height=10, wrap='word', bg='old lace')
        self.text_esp.place(x=470, y=100)

        def Esc():
            self.master.destroy()

        self.master.bind('<Escape>', lambda e: Esc())

        self.word_ = W0rd(self)
        self.f_word = Favorits(self)

        self.b_continue = Button(self.master, text='Continue', command=self.word_.getWord)
        self.b_continue.place(relx=0.01, y=300, width=150)

        self.b_back = Button(self.master, text='<---- Back', command=self.backwards)
        self.b_back.place(relx=0.39, y=300, width=150)

        self.b_search = Button(self.master, text=' (¬_¬) <SEARCH>  ಠ_ಠ ', command=self.search_)
        self.b_search.place(relx=0.77, y=300, width=150)

        self.Frase_button = ttk.Checkbutton(self.master, text='Frases')
        self.Frase_button.place(x=20, y=60)
        self.Frase_button.config(variable=self.sel, onvalue='True', offvalue='False')

        self.Fav_button = ttk.Checkbutton(self.master, text='Favoritos')
        self.Fav_button.place(x=450, y=60)
        self.Fav_button.config(variable=self.fav_sel, onvalue='True', offvalue='False')

        self.b_fav_add = Button(self.master, text=' Añadir ', command=self.f_word.add_)
        self.b_fav_add.place(relx=0.75, y=60, width=80)

        self.b_fav_rem = Button(self.master, text=' Quitar ', command=self.f_word.rem_)
        self.b_fav_rem.place(relx=0.87, y=60, width=80)

    def search_(self):
        idx_srch = []
        s_ch = self.text_rus.get('1.0', 'end')
        s_ch = s_ch.strip()
        for words in self.word_.search_list_rus:
            if s_ch in words:
                idx = self.word_.search_list_rus.index(words)
                idx_srch.append(idx)
        for words in self.word_.search_list_eng:
            if s_ch in words:
                idx = self.word_.search_list_eng.index(words)
                idx_srch.append(idx)

        for words in self.word_.search_list_esp:
            if s_ch in words:
                idx = self.word_.search_list_esp.index(words)
                idx_srch.append(idx)

        try:
            self.text_rus.delete('1.0', 'end')
            self.text_eng.delete('1.0', 'end')
            self.text_esp.delete('1.0', 'end')
        except:
            None
        count = 1
        for i in idx_srch:
            self.text_rus.insert(INSERT, '%d)  ' % count + self.word_.search_list_rus[i])
            self.text_rus.insert(INSERT, '\n ===============\n')

            self.text_eng.insert(INSERT, '%d)  ' % count + self.word_.search_list_eng[i])
            self.text_eng.insert(INSERT, '\n ===============\n')
            self.text_esp.insert(INSERT, '%d)  ' % count + self.word_.search_list_esp[i])
            self.text_esp.insert(INSERT, '\n ===============\n')
            count += 1

    def backwards(self):
        self.word_.c.execute("select * from voc_table where rowid=%d" % self.word_.total_count[-2])
        temp_list = self.word_.c.fetchone()
        try:
            self.text_rus.delete('1.0', 'end')
            self.text_rus.insert('1.0', temp_list[0])

            self.text_eng.delete('1.0', 'end')
            self.text_eng.insert('1.0', temp_list[1])

            self.text_esp.delete('1.0', 'end')
            self.text_esp.insert('1.0', temp_list[2])
        except:
            None


class Favorits(object):
    def __init__(self, graph_):
        self.graph_ = graph_
        self.conn3 = sqlite3.connect('C:/C/V2.db')
        self.c3 = self.conn3.cursor()

    def add_(self):
        to_add_rus = self.graph_.text_rus.get('1.0', 'end')
        to_add_eng = self.graph_.text_eng.get('1.0', 'end')
        to_add_esp = self.graph_.text_esp.get('1.0', 'end')
        self.c3.execute("INSERT INTO fav VALUES(?,?,?)", (to_add_rus, to_add_eng, to_add_esp))
        self.conn3.commit()

    def rem_(self):
        to_rem_rus = self.graph_.text_rus.get('1.0', 'end')
        to_rem_rus = to_rem_rus.strip('\n')
        idx = (self.graph_.word_.rnd_fav)
        self.c3.execute("DELETE FROM fav WHERE rowid=%d" % idx)
        self.conn3.commit()


class W0rd(object):
    def __init__(self, graph_):
        self.rnd_fav = 0
        self.graph_ = graph_
        self.total_count = []
        self.conn = sqlite3.connect(r'C:/C/V1.db')
        self.conn_frases = sqlite3.connect(':memory:')
        self.conn_favorits = sqlite3.connect('C:/C/V2.db')
        self.c = self.conn.cursor()
        self.c_frases = self.conn_frases.cursor()
        self.c_frases.execute("CREATE TABLE frases_words(rus_f,eng_f)")
        self.c_favorits = self.conn_favorits.cursor()
        self.search_list_rus = []
        self.search_list_eng = []
        self.search_list_esp = []
        self.c.execute("select *from voc_table")
        for w in self.c.fetchall():
            if 'Frases' in w[0]:
                self.c_frases.execute("INSERT INTO frases_words VALUES(?,?)", (w[0], w[1]))

            if len(w) == 3:
                self.search_list_rus.append(w[0])
                self.search_list_eng.append(w[1])
                self.search_list_esp.append(w[2])
            elif len(w) == 2:
                self.search_list_rus.append(w[0])
                self.search_list_eng.append(w[1])
                self.search_list_esp.append('None')
        self.conn.commit()
        self.conn_frases.commit()

    def getWord(self):

        if (self.graph_.sel.get()) == 'True':
            self.c_frases.execute("SELECT Count(*) FROM frases_words")
            frase_lim = self.c_frases.fetchall()
            rnd = random.randint(1, frase_lim[0][0])
            self.graph_.text_rus.delete('1.0', 'end')
            self.graph_.text_esp.delete('1.0', 'end')
            self.graph_.text_eng.delete('1.0', 'end')
            self.c_frases.execute("select *from frases_words where rowid=%d" % rnd)
            f = (self.c_frases.fetchone())
            self.graph_.text_rus.insert('1.0', f[0])
            self.conn_frases.commit()
        elif (self.graph_.fav_sel.get()) == 'True':
            self.c_favorits.execute("SELECT Count(*) FROM fav")
            fav_lim = self.c_favorits.fetchall()
            fav_lim = fav_lim[0][0]
            print('Limit: ', fav_lim)
            self.rnd_fav = random.randint(1, fav_lim)
            print('rnd: ', self.rnd_fav)
            self.graph_.text_rus.delete('1.0', 'end')
            self.graph_.text_esp.delete('1.0', 'end')
            self.graph_.text_eng.delete('1.0', 'end')

            self.c_favorits.execute("select *from fav where rowid=%d" % self.rnd_fav)
            f = self.c_favorits.fetchone()

            print('f: ', f)

            if len(f) == 3:
                self.graph_.text_rus.insert('1.0', f[0])
                self.graph_.text_eng.insert('1.0', f[1])
                self.graph_.text_esp.insert('1.0', f[2])
            elif len(f) == 2:
                self.graph_.text_rus.insert('1.0', f[0])
                self.graph_.text_eng.insert('1.0', f[1])
                self.graph_.text_esp.insert('1.0', 'None')
            self.conn_favorits.commit()

        else:
            self.conn_frases.commit()
            self.c.execute("select Count(*) from voc_table")
            self.conn.commit()
            lim_ = self.c.fetchall()
            print(lim_[0][0])
            rnd = random.randint(1, lim_[0][0])
            self.total_count.append(rnd)
            self.c.execute("select * from voc_table where rowid=%d" % rnd)
            temp_list = (self.c.fetchone())
            try:
                self.graph_.text_rus.delete('1.0', 'end')
                self.graph_.text_rus.insert('1.0', temp_list[0])
                self.graph_.text_eng.delete('1.0', 'end')
                self.graph_.text_eng.insert('1.0', temp_list[1])
                self.graph_.text_esp.delete('1.0', 'end')
                self.graph_.text_esp.insert('1.0', temp_list[2])
            except:
                None


def main():
    root = Tk()
    root.geometry('700x350+200+100')
    root.resizable(False, False)
    new_play = Graph(root)
    root.mainloop()


main()


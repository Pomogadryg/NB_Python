import xlrd
from docx import Document
import sys
import random
from tkinter import *
from tkinter import ttk
import sqlite3
from tkinter import messagebox


class Graph(object):
    def __init__(self, master):
        self.sel = StringVar()
        self.fav_sel = StringVar()

        self.master = master
        self.master.config(bg='powder blue')
        self.text_rus = Text(self.master, width=25, height=10, wrap='word', bg='old lace')
        self.text_rus.place(x=10, y=100)

        self.text_eng = Text(self.master, width=25, height=10, wrap='word', bg='old lace')
        self.text_eng.place(x=240, y=100)

        self.text_esp = Text(self.master, width=25, height=10, wrap='word', bg='old lace')
        self.text_esp.place(x=470, y=100)

        self.word_ = W0rd(self)
        self.f_word = Favorits(self)
        self.edit_ = Edit_(self)

        self.master.protocol("WM_DELETE_WINDOW", self.f_word.on_closing)
        self.master.bind('<Escape>', lambda e: self.f_word.on_closing())

        self.b_continue = Button(self.master, text='Continue', command=self.word_.getWord)
        self.b_continue.place(relx=0.01, y=300, width=150)

        self.text_rus.bind('<Double-Button-1>', lambda e: self.word_.getWord())

        self.b_back = Button(self.master, text='<---- Back', command=self.backwards)
        self.b_back.place(relx=0.39, y=300, width=150)

        self.b_search = Button(self.master, text=' (¬_¬) <SEARCH>  ಠ_ಠ ', command=self.search_)
        self.b_search.place(relx=0.77, y=300, width=150)

        self.Frase_button = ttk.Checkbutton(self.master, text='Frases')
        self.Frase_button.place(x=20, y=60)
        self.Frase_button.config(variable=self.sel, onvalue='True', offvalue='False')

        self.Fav_button = ttk.Checkbutton(self.master, text='Favoritos')
        self.Fav_button.place(x=450, y=60)
        self.Fav_button.config(variable=self.fav_sel, onvalue='True', offvalue='False')

        self.b_fav_add = Button(self.master, text=' Añadir ', command=self.f_word.add_)
        self.b_fav_add.place(relx=0.75, y=60, width=80)

        self.b_fav_rem = Button(self.master, text=' Quitar ', command=self.f_word.rem_)
        self.b_fav_rem.place(relx=0.87, y=60, width=80)

        self.edit_esp_button = Button(self.text_esp, text=' editar ', command=self.edit_.edit_esp)
        self.edit_esp_button.place(relx=0.9, x=-30, rely=0.9, y=-10, width=50)

        self.edit_eng_button = Button(self.text_eng, text=' editar ', command=self.edit_.edit_eng)
        self.edit_eng_button.place(relx=0.9, x=-30, rely=0.9, y=-10, width=50)

    def search_(self):
        idx_srch = []
        s_ch = self.text_rus.get('1.0', 'end')
        s_ch = s_ch.strip()
        for words in self.word_.search_list_rus:
            if 'Frases' not in words:
                if s_ch in words:
                    idx = self.word_.search_list_rus.index(words)
                    idx_srch.append(idx)
        for words in self.word_.search_list_eng:
            if s_ch in words:
                idx = self.word_.search_list_eng.index(words)
                idx_srch.append(idx)

        for words in self.word_.search_list_esp:
            if s_ch in words:
                idx = self.word_.search_list_esp.index(words)
                idx_srch.append(idx)

        try:
            self.text_rus.delete('1.0', 'end')
            self.text_eng.delete('1.0', 'end')
            self.text_esp.delete('1.0', 'end')
        except:
            None
        count = 1
        for i in idx_srch:
            self.text_rus.insert(INSERT, '%d)  ' % count + self.word_.search_list_rus[i])
            self.text_rus.insert(INSERT, '\n ===============\n')

            self.text_eng.insert(INSERT, '%d)  ' % count + self.word_.search_list_eng[i])
            self.text_eng.insert(INSERT, '\n ===============\n')
            self.text_esp.insert(INSERT, '%d)  ' % count + self.word_.search_list_esp[i])
            self.text_esp.insert(INSERT, '\n ===============\n')
            count += 1

    def backwards(self):
        self.word_.c.execute("select * from voc_table where rowid=%d" % self.word_.total_count[-2])
        temp_list = self.word_.c.fetchone()
        try:
            self.text_rus.delete('1.0', 'end')
            self.text_rus.insert('1.0', temp_list[1])

            self.text_eng.delete('1.0', 'end')
            self.text_eng.insert('1.0', temp_list[2])

            self.text_esp.delete('1.0', 'end')
            self.text_esp.insert('1.0', temp_list[3])
        except:
            None


class Edit_(object):
    def __init__(self, graph_):
        self.graph_ = graph_

    def edit_eng(self):
        to_modif_eng = (self.graph_.text_eng.get('1.0', 'end'))
        idx = (self.graph_.word_.rnd_for_continue)
        conn = sqlite3.connect('C:/C/V1.db')
        c = conn.cursor()
        c.execute("UPDATE voc_table SET eng_=? WHERE rowid=?", (to_modif_eng, idx))
        conn.commit()

    def edit_esp(self):
        to_modif_esp = (self.graph_.text_esp.get('1.0', 'end'))
        idx = (self.graph_.word_.rnd_for_continue)
        conn = sqlite3.connect('C:/C/V1.db')
        c = conn.cursor()
        c.execute("UPDATE voc_table SET esp_=? WHERE rowid=?", (to_modif_esp, idx))
        conn.commit()


class Favorits(object):
    def __init__(self, graph_):
        self.fav_list = []
        self.graph_ = graph_
        self.conn3 = sqlite3.connect('C:/C/V2.db')
        self.c3 = self.conn3.cursor()
        self.c3.execute("SELECT * FROM fav")
        for w in self.c3.fetchall():
            self.fav_list.append(w)

    def add_(self):

        to_add_rus = self.graph_.text_rus.get('1.0', 'end')
        to_add_eng = self.graph_.text_eng.get('1.0', 'end')
        to_add_esp = self.graph_.text_esp.get('1.0', 'end')

        self.fav_list.append((len(self.fav_list), to_add_rus, to_add_eng, to_add_eng))

    def rem_(self):
        idx = (self.graph_.word_.f_0_to_remove)
        for w in self.fav_list:
            if idx == w:
                self.fav_list.remove(w)

    def on_closing(self):
        if messagebox.askokcancel("Quit", "Do you want to quit?"):
            self.c3.execute("DELETE FROM fav")
            for w in self.fav_list:
                self.c3.execute("INSERT INTO fav VALUES(?,?,?,?)", (w[0], w[1], w[2], w[3]))
            self.conn3.commit()
            self.graph_.master.destroy()


class W0rd(object):
    def __init__(self, graph_):
        self.rnd_for_continue = 0
        self.rnd_fav = 0
        self.f_0_to_remove = []
        self.graph_ = graph_
        self.total_count = []
        self.conn = sqlite3.connect(r'C:/C/V1.db')
        self.conn_frases = sqlite3.connect(':memory:')
        self.conn_favorits = sqlite3.connect('C:/C/V2.db')
        self.c = self.conn.cursor()
        self.c_frases = self.conn_frases.cursor()
        self.c_frases.execute("CREATE TABLE frases_words(id_,rus_f,eng_f)")
        self.c_favorits = self.conn_favorits.cursor()
        self.search_list_rus = []
        self.search_list_eng = []
        self.search_list_esp = []
        self.c.execute("select *from voc_table")
        for w in self.c.fetchall():
            if 'Frases' in w[1]:
                self.c_frases.execute("INSERT INTO frases_words VALUES(?,?,?)", (w[0], w[1], w[2]))
                self.conn_frases.commit()

            if len(w) == 4:
                self.search_list_rus.append(w[1])
                self.search_list_eng.append(w[2])
                self.search_list_esp.append(w[3])
            elif len(w) == 3:
                self.search_list_rus.append(w[1])
                self.search_list_eng.append(w[2])
                self.search_list_esp.append('None')

    def getWord(self):

        if (self.graph_.sel.get()) == 'True':

            self.c_frases.execute("SELECT Count(*) FROM frases_words")
            frase_lim = self.c_frases.fetchall()
            rnd = random.randint(1, frase_lim[0][0])
            self.graph_.text_rus.delete('1.0', 'end')
            self.graph_.text_esp.delete('1.0', 'end')
            self.graph_.text_eng.delete('1.0', 'end')
            self.c_frases.execute("select *from frases_words where rowid=%d" % rnd)
            f = (self.c_frases.fetchone())
            self.graph_.text_rus.insert('1.0', f[1])

        elif (self.graph_.fav_sel.get()) == 'True':

            rnd = random.randint(0, len(self.graph_.f_word.fav_list) - 1)
            self.f_0_to_remove = self.graph_.f_word.fav_list[rnd]

            self.graph_.text_rus.delete('1.0', 'end')
            self.graph_.text_esp.delete('1.0', 'end')
            self.graph_.text_eng.delete('1.0', 'end')
            if len(self.graph_.f_word.fav_list[rnd]) == 4:
                self.graph_.text_rus.insert('1.0', self.graph_.f_word.fav_list[rnd][1])
                self.graph_.text_eng.insert('1.0', self.graph_.f_word.fav_list[rnd][2])
                self.graph_.text_esp.insert('1.0', self.graph_.f_word.fav_list[rnd][3])
            elif len(self.graph_.f_word.fav_list[rnd]) == 3:
                self.graph_.text_rus.insert('1.0', self.graph_.f_word.fav_list[rnd][1])
                self.graph_.text_eng.insert('1.0', self.graph_.f_word.fav_list[rnd][2])
                self.graph_.text_esp.insert('1.0', 'None')

        else:
            self.c.execute("select Count(*) from voc_table")
            # self.conn.commit()
            lim_ = self.c.fetchall()
            self.rnd_for_continue = random.randint(1, lim_[0][0])
            print(lim_[0][0], ' - ', self.rnd_for_continue)
            self.total_count.append(self.rnd_for_continue)
            self.c.execute("select * from voc_table where rowid=%d" % self.rnd_for_continue)
            temp_list = (self.c.fetchone())
            try:
                self.graph_.text_rus.delete('1.0', 'end')
                self.graph_.text_rus.insert('1.0', temp_list[1])
                self.graph_.text_eng.delete('1.0', 'end')
                self.graph_.text_eng.insert('1.0', temp_list[2])
                self.graph_.text_esp.delete('1.0', 'end')
                self.graph_.text_esp.insert('1.0', temp_list[3])
            except:
                None


def main():
    root = Tk()

    root.geometry('700x350+200+100')
    root.resizable(False, False)
    new_play = Graph(root)

    root.mainloop()


main()

